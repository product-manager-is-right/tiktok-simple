// Code generated by hertz generator.

package handler

import (
	"TIKTOK_User/model/vo"
	"TIKTOK_User/mw"
	"TIKTOK_User/service/serviceImpl"
	"context"
	"encoding/json"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
)

const (
	ResponseSuccess = 0
	ResponseFail    = 1
)

// UserInfo
/*
	用户信息接口，获取登录用户的id、昵称，如果实现社交部分的功能，还会返回关注数和粉丝数
*/
func UserInfo(ctx context.Context, c *app.RequestContext) {
	// 查询对象的userId
	queryUserId := c.Query("user_id")
	if queryUserId == "" {
		c.JSON(consts.StatusOK, vo.UserInfoResponse{
			Response: vo.Response{StatusCode: ResponseFail, StatusMsg: "query user_id empty"},
		})
		return
	}
	id, _ := strconv.ParseInt(queryUserId, 10, 64)

	// 通过token获取到的登录用户名
	userId, _ := c.Get(mw.IdentityKey)

	// 查询昵称、关注数、粉丝数
	usi := serviceImpl.UserServiceImpl{}
	if u, err := usi.GetUserInfoById(id, userId.(int64)); err == nil {
		c.JSON(consts.StatusOK, vo.UserInfoResponse{
			Response: vo.Response{StatusCode: ResponseSuccess},
			UserInfo: u,
		})
	} else {
		c.JSON(consts.StatusOK, vo.UserInfoResponse{
			Response: vo.Response{StatusCode: ResponseFail, StatusMsg: "error :" + err.Error()},
		})
	}
}

func UserInfoList(ctx context.Context, c *app.RequestContext) {
	// 查询对象的userIds,会以切片json的格式传过来,如[1,2,3,4]
	//queryUserIds := c.Param("user_ids")
	queryUserIds := c.PostForm("user_ids")
	ids := make([]int64, 0)

	if err := json.Unmarshal([]byte(queryUserIds), &ids); err != nil {
		c.JSON(consts.StatusOK, vo.UserInfosResponse{
			Response: vo.Response{
				StatusCode: ResponseFail,
				StatusMsg:  "error :" + err.Error(),
			},
			UserInfo: nil,
		})
		return
	}
	//可以传查询者的id,默认为0，即不传
	userId := int64(0)
	if str := c.Param("user_id"); str != "" {
		t, err2 := strconv.ParseInt(str, 10, 64)
		if err2 != nil {
			c.JSON(consts.StatusOK, vo.UserInfosResponse{
				Response: vo.Response{
					StatusCode: ResponseFail,
					StatusMsg:  "error :" + err2.Error(),
				},
			})
			return
		}
		userId = t
	}
	//res := make([]*vo.UserInfo, len(ids))
	// 查询昵称、关注数、粉丝数
	usi := serviceImpl.UserServiceImpl{}
	res, err := usi.GetUsersInfoByIds(ids, userId)
	if err != nil {
		c.JSON(consts.StatusOK, vo.UserInfosResponse{
			Response: vo.Response{
				StatusCode: ResponseFail,
				StatusMsg:  "error :" + err.Error(),
			},
		})
		return
	}
	c.JSON(consts.StatusOK, vo.UserInfosResponse{
		Response: vo.Response{
			StatusCode: ResponseSuccess,
			StatusMsg:  "query Success",
		},
		UserInfo: res,
	})

}

// Register
/*
	用户注册接口，新用户注册时提供用户名，密码，昵称即可，用户名需要唯一。创建成功后，返回用户id和权限token
*/
func Register(ctx context.Context, c *app.RequestContext) {
	username := c.Query("username")
	password := c.Query("password")
	if username == "" || password == "" {
		c.JSON(consts.StatusOK, vo.RegisterResponse{
			Response: vo.Response{StatusCode: ResponseFail, StatusMsg: "query username or password empty"},
		})
		c.Abort()
		return
	}
	usi := serviceImpl.UserServiceImpl{}
	if _, err := usi.CreateUserByNameAndPassword(username, password); err != nil {
		c.JSON(consts.StatusOK, vo.RegisterResponse{
			Response: vo.Response{
				StatusCode: ResponseFail,
				StatusMsg:  "error :" + err.Error()},
		})
		c.Abort()
	}
}
